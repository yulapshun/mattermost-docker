{"version":3,"sources":["webpack:///54.f5e8212b8bd1ceecefc9.js","webpack:///./components/claim/components/oauth_to_email.jsx"],"names":["webpackJsonp","2104","module","exports","__webpack_require__","global","_interopRequireDefault","obj","__esModule","default","Object","defineProperty","value","_getPrototypeOf","_getPrototypeOf2","_classCallCheck2","_classCallCheck3","_createClass2","_createClass3","_possibleConstructorReturn2","_possibleConstructorReturn3","_inherits2","_inherits3","_propTypes","_propTypes2","_react","_react2","_reactDom","_reactDom2","_reactIntl","_admin_actions","_constants","_constants2","_utils","Utils","newObj","key","prototype","hasOwnProperty","call","OAuthToEmail","_React$Component","props","this","_this","__proto__","submit","bind","state","e","_this2","preventDefault","password","findDOMNode","refs","error","localizeMessage","setState","passwordErr","isValidPassword","confirmPassword","passwordconfirm","oauthToEmail","currentType","email","err","message","createElement","className","formClass","uiType","SAML_SERVICE","toUpperCase","toTitleCase","FormattedMessage","id","defaultMessage","values","type","onSubmit","site","window","mm_config","SiteName","name","ref","placeholder","spellCheck","Component","defaultProps","propTypes","string"],"mappings":"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","file":"54.f5e8212b8bd1ceecefc9.js","sourcesContent":["webpackJsonp([54],{\n\n/***/ 2104:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _getPrototypeOf = __webpack_require__(6);\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = __webpack_require__(4);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(5);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = __webpack_require__(7);\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = __webpack_require__(8);\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _propTypes = __webpack_require__(2);\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _react = __webpack_require__(1);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = __webpack_require__(47);\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _reactIntl = __webpack_require__(17);\n\nvar _admin_actions = __webpack_require__(734);\n\nvar _constants = __webpack_require__(9);\n\nvar _constants2 = _interopRequireDefault(_constants);\n\nvar _utils = __webpack_require__(16);\n\nvar Utils = _interopRequireWildcard(_utils);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar OAuthToEmail = function (_React$Component) {\n    (0, _inherits3.default)(OAuthToEmail, _React$Component);\n\n    function OAuthToEmail(props) {\n        (0, _classCallCheck3.default)(this, OAuthToEmail);\n\n        var _this = (0, _possibleConstructorReturn3.default)(this, (OAuthToEmail.__proto__ || (0, _getPrototypeOf2.default)(OAuthToEmail)).call(this, props));\n\n        _this.submit = _this.submit.bind(_this);\n\n        _this.state = {};\n        return _this;\n    }\n\n    (0, _createClass3.default)(OAuthToEmail, [{\n        key: 'submit',\n        value: function submit(e) {\n            var _this2 = this;\n\n            e.preventDefault();\n            var state = {};\n\n            var password = _reactDom2.default.findDOMNode(this.refs.password).value;\n            if (!password) {\n                state.error = Utils.localizeMessage('claim.oauth_to_email.enterPwd', 'Please enter a password.');\n                this.setState(state);\n                return;\n            }\n\n            var passwordErr = Utils.isValidPassword(password);\n            if (passwordErr !== '') {\n                this.setState({\n                    error: passwordErr\n                });\n                return;\n            }\n\n            var confirmPassword = _reactDom2.default.findDOMNode(this.refs.passwordconfirm).value;\n            if (!confirmPassword || password !== confirmPassword) {\n                state.error = Utils.localizeMessage('claim.oauth_to_email.pwdNotMatch', 'Password do not match.');\n                this.setState(state);\n                return;\n            }\n\n            state.error = null;\n            this.setState(state);\n\n            (0, _admin_actions.oauthToEmail)(this.props.currentType, this.props.email, password, null, function (err) {\n                _this2.setState({ error: err.message });\n            });\n        }\n    }, {\n        key: 'render',\n        value: function render() {\n            var error = null;\n            if (this.state.error) {\n                error = _react2.default.createElement(\n                    'div',\n                    { className: 'form-group has-error' },\n                    _react2.default.createElement(\n                        'label',\n                        { className: 'control-label' },\n                        this.state.error\n                    )\n                );\n            }\n\n            var formClass = 'form-group';\n            if (error) {\n                formClass += ' has-error';\n            }\n\n            var uiType = (this.props.currentType === _constants2.default.SAML_SERVICE ? _constants2.default.SAML_SERVICE.toUpperCase() : Utils.toTitleCase(this.props.currentType)) + ' SSO';\n\n            return _react2.default.createElement(\n                'div',\n                null,\n                _react2.default.createElement(\n                    'h3',\n                    null,\n                    _react2.default.createElement(_reactIntl.FormattedMessage, {\n                        id: 'claim.oauth_to_email.title',\n                        defaultMessage: 'Switch {type} Account to Email',\n                        values: {\n                            type: uiType\n                        }\n                    })\n                ),\n                _react2.default.createElement(\n                    'form',\n                    { onSubmit: this.submit },\n                    _react2.default.createElement(\n                        'p',\n                        null,\n                        _react2.default.createElement(_reactIntl.FormattedMessage, {\n                            id: 'claim.oauth_to_email.description',\n                            defaultMessage: 'Upon changing your account type, you will only be able to login with your email and password.'\n                        })\n                    ),\n                    _react2.default.createElement(\n                        'p',\n                        null,\n                        _react2.default.createElement(_reactIntl.FormattedMessage, {\n                            id: 'claim.oauth_to_email.enterNewPwd',\n                            defaultMessage: 'Enter a new password for your {site} email account',\n                            values: {\n                                site: global.window.mm_config.SiteName\n                            }\n                        })\n                    ),\n                    _react2.default.createElement(\n                        'div',\n                        { className: formClass },\n                        _react2.default.createElement('input', {\n                            type: 'password',\n                            className: 'form-control',\n                            name: 'password',\n                            ref: 'password',\n                            placeholder: Utils.localizeMessage('claim.oauth_to_email.newPwd', 'New Password'),\n                            spellCheck: 'false'\n                        })\n                    ),\n                    _react2.default.createElement(\n                        'div',\n                        { className: formClass },\n                        _react2.default.createElement('input', {\n                            type: 'password',\n                            className: 'form-control',\n                            name: 'passwordconfirm',\n                            ref: 'passwordconfirm',\n                            placeholder: Utils.localizeMessage('claim.oauth_to_email.confirm', 'Confirm Password'),\n                            spellCheck: 'false'\n                        })\n                    ),\n                    error,\n                    _react2.default.createElement(\n                        'button',\n                        {\n                            type: 'submit',\n                            className: 'btn btn-primary'\n                        },\n                        _react2.default.createElement(_reactIntl.FormattedMessage, {\n                            id: 'claim.oauth_to_email.switchTo',\n                            defaultMessage: 'Switch {type} to email and password',\n                            values: {\n                                type: uiType\n                            }\n                        })\n                    )\n                )\n            );\n        }\n    }]);\n    return OAuthToEmail;\n}(_react2.default.Component); // Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See License.txt for license information.\n\nexports.default = OAuthToEmail;\n\n\nOAuthToEmail.defaultProps = {};\nOAuthToEmail.propTypes = {\n    currentType: _propTypes2.default.string,\n    email: _propTypes2.default.string\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(22)))\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// 54.f5e8212b8bd1ceecefc9.js","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See License.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {FormattedMessage} from 'react-intl';\n\nimport {oauthToEmail} from 'actions/admin_actions.jsx';\n\nimport Constants from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\n\nexport default class OAuthToEmail extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.submit = this.submit.bind(this);\n\n        this.state = {};\n    }\n\n    submit(e) {\n        e.preventDefault();\n        const state = {};\n\n        const password = ReactDOM.findDOMNode(this.refs.password).value;\n        if (!password) {\n            state.error = Utils.localizeMessage('claim.oauth_to_email.enterPwd', 'Please enter a password.');\n            this.setState(state);\n            return;\n        }\n\n        const passwordErr = Utils.isValidPassword(password);\n        if (passwordErr !== '') {\n            this.setState({\n                error: passwordErr\n            });\n            return;\n        }\n\n        const confirmPassword = ReactDOM.findDOMNode(this.refs.passwordconfirm).value;\n        if (!confirmPassword || password !== confirmPassword) {\n            state.error = Utils.localizeMessage('claim.oauth_to_email.pwdNotMatch', 'Password do not match.');\n            this.setState(state);\n            return;\n        }\n\n        state.error = null;\n        this.setState(state);\n\n        oauthToEmail(\n            this.props.currentType,\n            this.props.email,\n            password,\n            null,\n            (err) => {\n                this.setState({error: err.message});\n            }\n        );\n    }\n    render() {\n        var error = null;\n        if (this.state.error) {\n            error = <div className='form-group has-error'><label className='control-label'>{this.state.error}</label></div>;\n        }\n\n        var formClass = 'form-group';\n        if (error) {\n            formClass += ' has-error';\n        }\n\n        const uiType = `${(this.props.currentType === Constants.SAML_SERVICE ? Constants.SAML_SERVICE.toUpperCase() : Utils.toTitleCase(this.props.currentType))} SSO`;\n\n        return (\n            <div>\n                <h3>\n                    <FormattedMessage\n                        id='claim.oauth_to_email.title'\n                        defaultMessage='Switch {type} Account to Email'\n                        values={{\n                            type: uiType\n                        }}\n                    />\n                </h3>\n                <form onSubmit={this.submit}>\n                    <p>\n                        <FormattedMessage\n                            id='claim.oauth_to_email.description'\n                            defaultMessage='Upon changing your account type, you will only be able to login with your email and password.'\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='claim.oauth_to_email.enterNewPwd'\n                            defaultMessage='Enter a new password for your {site} email account'\n                            values={{\n                                site: global.window.mm_config.SiteName\n                            }}\n                        />\n                    </p>\n                    <div className={formClass}>\n                        <input\n                            type='password'\n                            className='form-control'\n                            name='password'\n                            ref='password'\n                            placeholder={Utils.localizeMessage('claim.oauth_to_email.newPwd', 'New Password')}\n                            spellCheck='false'\n                        />\n                    </div>\n                    <div className={formClass}>\n                        <input\n                            type='password'\n                            className='form-control'\n                            name='passwordconfirm'\n                            ref='passwordconfirm'\n                            placeholder={Utils.localizeMessage('claim.oauth_to_email.confirm', 'Confirm Password')}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {error}\n                    <button\n                        type='submit'\n                        className='btn btn-primary'\n                    >\n                        <FormattedMessage\n                            id='claim.oauth_to_email.switchTo'\n                            defaultMessage='Switch {type} to email and password'\n                            values={{\n                                type: uiType\n                            }}\n                        />\n                    </button>\n                </form>\n            </div>\n        );\n    }\n}\n\nOAuthToEmail.defaultProps = {\n};\nOAuthToEmail.propTypes = {\n    currentType: PropTypes.string,\n    email: PropTypes.string\n};\n\n\n\n// WEBPACK FOOTER //\n// ./components/claim/components/oauth_to_email.jsx"],"sourceRoot":""}