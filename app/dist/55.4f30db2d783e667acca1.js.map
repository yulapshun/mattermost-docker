{"version":3,"sources":["webpack:///55.4f30db2d783e667acca1.js","webpack:///./components/claim/components/ldap_to_email.jsx"],"names":["webpackJsonp","2106","module","exports","__webpack_require__","global","_interopRequireDefault","obj","__esModule","default","Object","defineProperty","value","_getPrototypeOf","_getPrototypeOf2","_classCallCheck2","_classCallCheck3","_createClass2","_createClass3","_possibleConstructorReturn2","_possibleConstructorReturn3","_inherits2","_inherits3","_propTypes","_propTypes2","_react","_react2","_reactIntl","_user_actions","_utils","Utils","newObj","key","prototype","hasOwnProperty","call","_login_mfa","_login_mfa2","LDAPToEmail","_React$Component","props","this","_this","__proto__","submit","bind","preSubmit","state","passwordError","confirmError","ldapPasswordError","serverError","e","_this2","preventDefault","ldapPassword","refs","ldappassword","localizeMessage","setState","password","passwordErr","isValidPassword","confirmPassword","passwordconfirm","checkMfa","email","requiresMfa","showMfa","err","error","message","loginId","token","_this3","switchFromLdapToEmail","id","startsWith","formClass","createElement","className","passwordClass","ldapPasswordClass","confimClass","passwordPlaceholder","window","mm_config","LdapPasswordFieldName","content","onSubmit","FormattedMessage","defaultMessage","values","type","name","ref","placeholder","spellCheck","Component","defaultProps","propTypes","string"],"mappings":"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","file":"55.4f30db2d783e667acca1.js","sourcesContent":["webpackJsonp([55],{\n\n/***/ 2106:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _getPrototypeOf = __webpack_require__(6);\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = __webpack_require__(4);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(5);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = __webpack_require__(7);\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = __webpack_require__(8);\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _propTypes = __webpack_require__(2);\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _react = __webpack_require__(1);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactIntl = __webpack_require__(17);\n\nvar _user_actions = __webpack_require__(69);\n\nvar _utils = __webpack_require__(16);\n\nvar Utils = _interopRequireWildcard(_utils);\n\nvar _login_mfa = __webpack_require__(2085);\n\nvar _login_mfa2 = _interopRequireDefault(_login_mfa);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See License.txt for license information.\n\nvar LDAPToEmail = function (_React$Component) {\n    (0, _inherits3.default)(LDAPToEmail, _React$Component);\n\n    function LDAPToEmail(props) {\n        (0, _classCallCheck3.default)(this, LDAPToEmail);\n\n        var _this = (0, _possibleConstructorReturn3.default)(this, (LDAPToEmail.__proto__ || (0, _getPrototypeOf2.default)(LDAPToEmail)).call(this, props));\n\n        _this.submit = _this.submit.bind(_this);\n        _this.preSubmit = _this.preSubmit.bind(_this);\n\n        _this.state = {\n            passwordError: '',\n            confirmError: '',\n            ldapPasswordError: '',\n            serverError: ''\n        };\n        return _this;\n    }\n\n    (0, _createClass3.default)(LDAPToEmail, [{\n        key: 'preSubmit',\n        value: function preSubmit(e) {\n            var _this2 = this;\n\n            e.preventDefault();\n\n            var state = {\n                passwordError: '',\n                confirmError: '',\n                ldapPasswordError: '',\n                serverError: ''\n            };\n\n            var ldapPassword = this.refs.ldappassword.value;\n            if (!ldapPassword) {\n                state.ldapPasswordError = Utils.localizeMessage('claim.ldap_to_email.ldapPasswordError', 'Please enter your AD/LDAP password.');\n                this.setState(state);\n                return;\n            }\n\n            var password = this.refs.password.value;\n            if (!password) {\n                state.passwordError = Utils.localizeMessage('claim.ldap_to_email.pwdError', 'Please enter your password.');\n                this.setState(state);\n                return;\n            }\n\n            var passwordErr = Utils.isValidPassword(password);\n            if (passwordErr !== '') {\n                this.setState({\n                    passwordError: passwordErr\n                });\n                return;\n            }\n\n            var confirmPassword = this.refs.passwordconfirm.value;\n            if (!confirmPassword || password !== confirmPassword) {\n                state.confirmError = Utils.localizeMessage('claim.ldap_to_email.pwdNotMatch', 'Passwords do not match.');\n                this.setState(state);\n                return;\n            }\n\n            state.password = password;\n            state.ldapPassword = ldapPassword;\n            this.setState(state);\n\n            (0, _user_actions.checkMfa)(this.props.email, function (requiresMfa) {\n                if (requiresMfa) {\n                    _this2.setState({ showMfa: true });\n                } else {\n                    _this2.submit(_this2.props.email, password, '', ldapPassword);\n                }\n            }, function (err) {\n                _this2.setState({ error: err.message });\n            });\n        }\n    }, {\n        key: 'submit',\n        value: function submit(loginId, password, token, ldapPassword) {\n            var _this3 = this;\n\n            (0, _user_actions.switchFromLdapToEmail)(this.props.email, password, token, ldapPassword || this.state.ldapPassword, null, function (err) {\n                if (err.id.startsWith('model.user.is_valid.pwd')) {\n                    _this3.setState({ passwordError: err.message, showMfa: false });\n                } else {\n                    switch (err.id) {\n                        case 'ent.ldap.do_login.invalid_password.app_error':\n                            _this3.setState({ ldapPasswordError: err.message, showMfa: false });\n                            break;\n                        default:\n                            _this3.setState({ serverError: err.message, showMfa: false });\n                    }\n                }\n            });\n        }\n    }, {\n        key: 'render',\n        value: function render() {\n            var serverError = null;\n            var formClass = 'form-group';\n            if (this.state.serverError) {\n                serverError = _react2.default.createElement(\n                    'div',\n                    { className: 'form-group has-error' },\n                    _react2.default.createElement(\n                        'label',\n                        { className: 'control-label' },\n                        this.state.serverError\n                    )\n                );\n                formClass += ' has-error';\n            }\n\n            var passwordError = null;\n            var passwordClass = 'form-group';\n            if (this.state.passwordError) {\n                passwordError = _react2.default.createElement(\n                    'div',\n                    { className: 'form-group has-error' },\n                    _react2.default.createElement(\n                        'label',\n                        { className: 'control-label' },\n                        this.state.passwordError\n                    )\n                );\n                passwordClass += ' has-error';\n            }\n\n            var ldapPasswordError = null;\n            var ldapPasswordClass = 'form-group';\n            if (this.state.ldapPasswordError) {\n                ldapPasswordError = _react2.default.createElement(\n                    'div',\n                    { className: 'form-group has-error' },\n                    _react2.default.createElement(\n                        'label',\n                        { className: 'control-label' },\n                        this.state.ldapPasswordError\n                    )\n                );\n                ldapPasswordClass += ' has-error';\n            }\n\n            var confirmError = null;\n            var confimClass = 'form-group';\n            if (this.state.confirmError) {\n                confirmError = _react2.default.createElement(\n                    'div',\n                    { className: 'form-group has-error' },\n                    _react2.default.createElement(\n                        'label',\n                        { className: 'control-label' },\n                        this.state.confirmError\n                    )\n                );\n                confimClass += ' has-error';\n            }\n\n            var passwordPlaceholder = void 0;\n            if (global.window.mm_config.LdapPasswordFieldName) {\n                passwordPlaceholder = global.window.mm_config.LdapPasswordFieldName;\n            } else {\n                passwordPlaceholder = Utils.localizeMessage('claim.ldap_to_email.ldapPwd', 'AD/LDAP Password');\n            }\n\n            var content = void 0;\n            if (this.state.showMfa) {\n                content = _react2.default.createElement(_login_mfa2.default, {\n                    loginId: this.props.email,\n                    password: this.state.password,\n                    submit: this.submit\n                });\n            } else {\n                content = _react2.default.createElement(\n                    'form',\n                    {\n                        onSubmit: this.preSubmit,\n                        className: formClass\n                    },\n                    _react2.default.createElement(\n                        'p',\n                        null,\n                        _react2.default.createElement(_reactIntl.FormattedMessage, {\n                            id: 'claim.ldap_to_email.email',\n                            defaultMessage: 'After switching your authentication method, you will use {email} to login. Your AD/LDAP credentials will no longer allow access to Mattermost.',\n                            values: {\n                                email: this.props.email\n                            }\n                        })\n                    ),\n                    _react2.default.createElement(\n                        'p',\n                        null,\n                        _react2.default.createElement(_reactIntl.FormattedMessage, {\n                            id: 'claim.ldap_to_email.enterLdapPwd',\n                            defaultMessage: '{ldapPassword}:',\n                            values: {\n                                ldapPassword: passwordPlaceholder\n                            }\n                        })\n                    ),\n                    _react2.default.createElement(\n                        'div',\n                        { className: ldapPasswordClass },\n                        _react2.default.createElement('input', {\n                            type: 'password',\n                            className: 'form-control',\n                            name: 'ldapPassword',\n                            ref: 'ldappassword',\n                            placeholder: passwordPlaceholder,\n                            spellCheck: 'false'\n                        })\n                    ),\n                    ldapPasswordError,\n                    _react2.default.createElement(\n                        'p',\n                        null,\n                        _react2.default.createElement(_reactIntl.FormattedMessage, {\n                            id: 'claim.ldap_to_email.enterPwd',\n                            defaultMessage: 'New email login password:'\n                        })\n                    ),\n                    _react2.default.createElement(\n                        'div',\n                        { className: passwordClass },\n                        _react2.default.createElement('input', {\n                            type: 'password',\n                            className: 'form-control',\n                            name: 'password',\n                            ref: 'password',\n                            placeholder: Utils.localizeMessage('claim.ldap_to_email.pwd', 'Password'),\n                            spellCheck: 'false'\n                        })\n                    ),\n                    passwordError,\n                    _react2.default.createElement(\n                        'div',\n                        { className: confimClass },\n                        _react2.default.createElement('input', {\n                            type: 'password',\n                            className: 'form-control',\n                            name: 'passwordconfirm',\n                            ref: 'passwordconfirm',\n                            placeholder: Utils.localizeMessage('claim.ldap_to_email.confirm', 'Confirm Password'),\n                            spellCheck: 'false'\n                        })\n                    ),\n                    confirmError,\n                    _react2.default.createElement(\n                        'button',\n                        {\n                            type: 'submit',\n                            className: 'btn btn-primary'\n                        },\n                        _react2.default.createElement(_reactIntl.FormattedMessage, {\n                            id: 'claim.ldap_to_email.switchTo',\n                            defaultMessage: 'Switch account to email/password'\n                        })\n                    ),\n                    serverError\n                );\n            }\n\n            return _react2.default.createElement(\n                'div',\n                null,\n                _react2.default.createElement(\n                    'h3',\n                    null,\n                    _react2.default.createElement(_reactIntl.FormattedMessage, {\n                        id: 'claim.ldap_to_email.title',\n                        defaultMessage: 'Switch AD/LDAP Account to Email/Password'\n                    })\n                ),\n                content\n            );\n        }\n    }]);\n    return LDAPToEmail;\n}(_react2.default.Component);\n\nexports.default = LDAPToEmail;\n\n\nLDAPToEmail.defaultProps = {};\nLDAPToEmail.propTypes = {\n    email: _propTypes2.default.string\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(22)))\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// 55.4f30db2d783e667acca1.js","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See License.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {checkMfa, switchFromLdapToEmail} from 'actions/user_actions.jsx';\n\nimport * as Utils from 'utils/utils.jsx';\n\nimport LoginMfa from 'components/login/components/login_mfa.jsx';\n\nexport default class LDAPToEmail extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.submit = this.submit.bind(this);\n        this.preSubmit = this.preSubmit.bind(this);\n\n        this.state = {\n            passwordError: '',\n            confirmError: '',\n            ldapPasswordError: '',\n            serverError: ''\n        };\n    }\n\n    preSubmit(e) {\n        e.preventDefault();\n\n        var state = {\n            passwordError: '',\n            confirmError: '',\n            ldapPasswordError: '',\n            serverError: ''\n        };\n\n        const ldapPassword = this.refs.ldappassword.value;\n        if (!ldapPassword) {\n            state.ldapPasswordError = Utils.localizeMessage('claim.ldap_to_email.ldapPasswordError', 'Please enter your AD/LDAP password.');\n            this.setState(state);\n            return;\n        }\n\n        const password = this.refs.password.value;\n        if (!password) {\n            state.passwordError = Utils.localizeMessage('claim.ldap_to_email.pwdError', 'Please enter your password.');\n            this.setState(state);\n            return;\n        }\n\n        const passwordErr = Utils.isValidPassword(password);\n        if (passwordErr !== '') {\n            this.setState({\n                passwordError: passwordErr\n            });\n            return;\n        }\n\n        const confirmPassword = this.refs.passwordconfirm.value;\n        if (!confirmPassword || password !== confirmPassword) {\n            state.confirmError = Utils.localizeMessage('claim.ldap_to_email.pwdNotMatch', 'Passwords do not match.');\n            this.setState(state);\n            return;\n        }\n\n        state.password = password;\n        state.ldapPassword = ldapPassword;\n        this.setState(state);\n\n        checkMfa(\n            this.props.email,\n            (requiresMfa) => {\n                if (requiresMfa) {\n                    this.setState({showMfa: true});\n                } else {\n                    this.submit(this.props.email, password, '', ldapPassword);\n                }\n            },\n            (err) => {\n                this.setState({error: err.message});\n            }\n        );\n    }\n\n    submit(loginId, password, token, ldapPassword) {\n        switchFromLdapToEmail(\n            this.props.email,\n            password,\n            token,\n            ldapPassword || this.state.ldapPassword,\n            null,\n            (err) => {\n                if (err.id.startsWith('model.user.is_valid.pwd')) {\n                    this.setState({passwordError: err.message, showMfa: false});\n                } else {\n                    switch (err.id) {\n                    case 'ent.ldap.do_login.invalid_password.app_error':\n                        this.setState({ldapPasswordError: err.message, showMfa: false});\n                        break;\n                    default:\n                        this.setState({serverError: err.message, showMfa: false});\n                    }\n                }\n            }\n        );\n    }\n\n    render() {\n        let serverError = null;\n        let formClass = 'form-group';\n        if (this.state.serverError) {\n            serverError = <div className='form-group has-error'><label className='control-label'>{this.state.serverError}</label></div>;\n            formClass += ' has-error';\n        }\n\n        let passwordError = null;\n        let passwordClass = 'form-group';\n        if (this.state.passwordError) {\n            passwordError = <div className='form-group has-error'><label className='control-label'>{this.state.passwordError}</label></div>;\n            passwordClass += ' has-error';\n        }\n\n        let ldapPasswordError = null;\n        let ldapPasswordClass = 'form-group';\n        if (this.state.ldapPasswordError) {\n            ldapPasswordError = <div className='form-group has-error'><label className='control-label'>{this.state.ldapPasswordError}</label></div>;\n            ldapPasswordClass += ' has-error';\n        }\n\n        let confirmError = null;\n        let confimClass = 'form-group';\n        if (this.state.confirmError) {\n            confirmError = <div className='form-group has-error'><label className='control-label'>{this.state.confirmError}</label></div>;\n            confimClass += ' has-error';\n        }\n\n        let passwordPlaceholder;\n        if (global.window.mm_config.LdapPasswordFieldName) {\n            passwordPlaceholder = global.window.mm_config.LdapPasswordFieldName;\n        } else {\n            passwordPlaceholder = Utils.localizeMessage('claim.ldap_to_email.ldapPwd', 'AD/LDAP Password');\n        }\n\n        let content;\n        if (this.state.showMfa) {\n            content = (\n                <LoginMfa\n                    loginId={this.props.email}\n                    password={this.state.password}\n                    submit={this.submit}\n                />\n            );\n        } else {\n            content = (\n                <form\n                    onSubmit={this.preSubmit}\n                    className={formClass}\n                >\n                    <p>\n                        <FormattedMessage\n                            id='claim.ldap_to_email.email'\n                            defaultMessage='After switching your authentication method, you will use {email} to login. Your AD/LDAP credentials will no longer allow access to Mattermost.'\n                            values={{\n                                email: this.props.email\n                            }}\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='claim.ldap_to_email.enterLdapPwd'\n                            defaultMessage='{ldapPassword}:'\n                            values={{\n                                ldapPassword: passwordPlaceholder\n                            }}\n                        />\n                    </p>\n                    <div className={ldapPasswordClass}>\n                        <input\n                            type='password'\n                            className='form-control'\n                            name='ldapPassword'\n                            ref='ldappassword'\n                            placeholder={passwordPlaceholder}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {ldapPasswordError}\n                    <p>\n                        <FormattedMessage\n                            id='claim.ldap_to_email.enterPwd'\n                            defaultMessage='New email login password:'\n                        />\n                    </p>\n                    <div className={passwordClass}>\n                        <input\n                            type='password'\n                            className='form-control'\n                            name='password'\n                            ref='password'\n                            placeholder={Utils.localizeMessage('claim.ldap_to_email.pwd', 'Password')}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {passwordError}\n                    <div className={confimClass}>\n                        <input\n                            type='password'\n                            className='form-control'\n                            name='passwordconfirm'\n                            ref='passwordconfirm'\n                            placeholder={Utils.localizeMessage('claim.ldap_to_email.confirm', 'Confirm Password')}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {confirmError}\n                    <button\n                        type='submit'\n                        className='btn btn-primary'\n                    >\n                        <FormattedMessage\n                            id='claim.ldap_to_email.switchTo'\n                            defaultMessage='Switch account to email/password'\n                        />\n                    </button>\n                    {serverError}\n                </form>\n            );\n        }\n\n        return (\n            <div>\n                <h3>\n                    <FormattedMessage\n                        id='claim.ldap_to_email.title'\n                        defaultMessage='Switch AD/LDAP Account to Email/Password'\n                    />\n                </h3>\n                {content}\n            </div>\n        );\n    }\n}\n\nLDAPToEmail.defaultProps = {\n};\nLDAPToEmail.propTypes = {\n    email: PropTypes.string\n};\n\n\n\n// WEBPACK FOOTER //\n// ./components/claim/components/ldap_to_email.jsx"],"sourceRoot":""}